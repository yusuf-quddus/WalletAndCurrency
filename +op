Currency operator+(Currency& c1, Currency& c2)
{
    Currency c3;
    c3.wholePart = c1.wholePart + c2.wholePart;
    c3.fractionalPart = c1.fractionalPart + c2.fractionalPart;
    
    if (c3.fractionalPart > 100) {
		c3.wholePart += (c3.fractionalPart / 100);
		c3.fractionalPart = c3.fractionalPart % 100;
	}
    
    return c3;
}

Currency operator-(Currency& c1, Currency& c2)
{
    Currency c3;
    c3.wholePart = c1.wholePart - c2.wholePart;
    c3.fractionalPart = c1.fractionalPart - c2.fractionalPart;
    
    if (c3.fractionalPart > 100) {
		c3.wholePart += (c3.fractionalPart / 100);
		c3.fractionalPart = c3.fractionalPart % 100;
	}
	
	// if fraction is negative, make positive
	if (c3.fractionalPart < 0 ) {
	    c3.wholePart -= 1;
	    c3.fractionalPart += 100; 
	}
	
	// if whole is negative, turn everything to 0.00
	if (c3.wholePart < 0 ) {
        c3.wholePart = 0;
        c3.fractionalPart = 0;
	}
	
    return c3;
}

bool operator==(Currency& c1, Currency& c2)
{
    bool equal;
    equal = (c1.wholePart == c2.wholePart && c1.fractionalPart == c2.fractionalPart);
    return equal;
}

bool operator > (Currency& c1, Currency& c2)
{
    if (c1.wholePart > c2.wholePart)
    return true;
    
    else if (c1.wholePart == c2.wholePart && c1.fractionalPart > c2.fractionalPart)
    return true;
    
    else 
    return false;
}

bool operator < (Currency& c1, Currency& c2)
{
    if (c1.wholePart < c2.wholePart)
    return true;
    
    else if (c1.wholePart == c2.wholePart && c1.fractionalPart < c2.fractionalPart)
    return true;
    
    else 
    return false;
}

bool operator >= (Currency& c1, Currency& c2)
{
    if (c1.wholePart >= c2.wholePart)
    return true;
    
    else if (c1.wholePart == c2.wholePart && c1.fractionalPart >= c2.fractionalPart)
    return true;
    
    else 
    return false;
}

bool operator <= (Currency& c1, Currency& c2)
{
    if (c1.wholePart <= c2.wholePart)
    return true;
    
    else if (c1.wholePart == c2.wholePart && c1.fractionalPart <= c2.fractionalPart)
    return true;
    
    else 
    return false;
}







	//operator overloading
	friend Currency operator+ (Currency&, Currency&);
	friend Currency operator- (Currency&, Currency&);
	friend bool operator== (Currency&, Currency&);
	friend bool operator> (Currency&, Currency&);
	friend bool operator< (Currency&, Currency&);
	friend bool operator>= (Currency&, Currency&);
	friend bool operator<= (Currency&, Currency&);
